
Linetracer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000900  00000994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000900  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000074  00800130  00800130  000009c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009eb  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086a  00000000  00000000  00001463  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000454  00000000  00000000  00001ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000422  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000305  00000000  00000000  0000266e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002973  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__vector_1>
   6:	00 00       	nop
   8:	6d c0       	rjmp	.+218    	; 0xe4 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	65 c0       	rjmp	.+202    	; 0x10c <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e0       	ldi	r30, 0x00	; 0
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 33       	cpi	r26, 0x30	; 48
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e3       	ldi	r26, 0x30	; 48
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 3a       	cpi	r26, 0xA4	; 164
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d8 d1       	rcall	.+944    	; 0x474 <main>
  c4:	1b c4       	rjmp	.+2102   	; 0x8fc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_1>:
double adcmin[8] = {2000,2000,2000,2000,2000,2000,2000,2000};
double normalize[8];
double IR[8];


ISR(INT0_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
	//MODE 최대 최소 받기
	
	ModeSet=0;
  d2:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <ModeSet+0x1>
  d6:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <ModeSet>
	
	
}
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_2>:




ISR(INT1_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
	//MODE 주행
	
	ModeSet=1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <ModeSet+0x1>
  fa:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <ModeSet>
	
}
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_16>:


ISR(TIMER0_OVF_vect){
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	0b b6       	in	r0, 0x3b	; 59
 118:	0f 92       	push	r0
 11a:	4f 92       	push	r4
 11c:	5f 92       	push	r5
 11e:	6f 92       	push	r6
 120:	7f 92       	push	r7
 122:	8f 92       	push	r8
 124:	9f 92       	push	r9
 126:	af 92       	push	r10
 128:	bf 92       	push	r11
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	60 97       	sbiw	r28, 0x10	; 16
 154:	de bf       	out	0x3e, r29	; 62
 156:	cd bf       	out	0x3d, r28	; 61
	
	cnt++;
 158:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cnt>
 15c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <cnt+0x1>
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <cnt+0x1>
 166:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <cnt>
	TCNT0 = 131;
 16a:	83 e8       	ldi	r24, 0x83	; 131
 16c:	82 bf       	out	0x32, r24	; 50
						
	if (cnt==100)						//0.1초
 16e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <cnt>
 172:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <cnt+0x1>
 176:	84 36       	cpi	r24, 0x64	; 100
 178:	91 05       	cpc	r25, r1
 17a:	09 f0       	breq	.+2      	; 0x17e <__vector_16+0x72>
 17c:	46 c1       	rjmp	.+652    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{									//이제 주행하는 걸 넣어야 되는 걸까??
		
		ADMUX = 0x40;
 17e:	80 e4       	ldi	r24, 0x40	; 64
 180:	87 b9       	out	0x07, r24	; 7
		for(int i=0;i<8;i++){
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	12 c0       	rjmp	.+36     	; 0x1ac <__vector_16+0xa0>
			ADCSRA |= (1<< ADSC);
 188:	26 b1       	in	r18, 0x06	; 6
 18a:	20 64       	ori	r18, 0x40	; 64
 18c:	26 b9       	out	0x06, r18	; 6
			++ADMUX;
 18e:	27 b1       	in	r18, 0x07	; 7
 190:	2f 5f       	subi	r18, 0xFF	; 255
 192:	27 b9       	out	0x07, r18	; 7
			while(!(ADCSRA&(1<<ADIF)));
 194:	34 9b       	sbis	0x06, 4	; 6
 196:	fe cf       	rjmp	.-4      	; 0x194 <__vector_16+0x88>
			adc[i] = ADC;				// 반복문 돌면서 에이디씨 제로부터 배열에 집어 넣는 거임.
 198:	24 b1       	in	r18, 0x04	; 4
 19a:	35 b1       	in	r19, 0x05	; 5
 19c:	fc 01       	movw	r30, r24
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	ee 5a       	subi	r30, 0xAE	; 174
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	31 83       	std	Z+1, r19	; 0x01
 1a8:	20 83       	st	Z, r18
						
	if (cnt==100)						//0.1초
	{									//이제 주행하는 걸 넣어야 되는 걸까??
		
		ADMUX = 0x40;
		for(int i=0;i<8;i++){
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	88 30       	cpi	r24, 0x08	; 8
 1ae:	91 05       	cpc	r25, r1
 1b0:	5c f3       	brlt	.-42     	; 0x188 <__vector_16+0x7c>
			++ADMUX;
			while(!(ADCSRA&(1<<ADIF)));
			adc[i] = ADC;				// 반복문 돌면서 에이디씨 제로부터 배열에 집어 넣는 거임.
		}
										//ADC를 받아라잉
		if(ModeSet==0)
 1b2:	e0 90 62 01 	lds	r14, 0x0162	; 0x800162 <ModeSet>
 1b6:	f0 90 63 01 	lds	r15, 0x0163	; 0x800163 <ModeSet+0x1>
 1ba:	e1 14       	cp	r14, r1
 1bc:	f1 04       	cpc	r15, r1
 1be:	09 f4       	brne	.+2      	; 0x1c2 <__vector_16+0xb6>
 1c0:	46 c0       	rjmp	.+140    	; 0x24e <__vector_16+0x142>
 1c2:	4b c0       	rjmp	.+150    	; 0x25a <__vector_16+0x14e>
		{
			for(int n = 0; n < 8; n ++) //큰가 작은가
			{
				if( adc[n] > adcmax[n]) // 클때 넣는거
 1c4:	f8 01       	movw	r30, r16
 1c6:	ee 0f       	add	r30, r30
 1c8:	ff 1f       	adc	r31, r31
 1ca:	ee 5a       	subi	r30, 0xAE	; 174
 1cc:	fe 4f       	sbci	r31, 0xFE	; 254
 1ce:	60 81       	ld	r22, Z
 1d0:	71 81       	ldd	r23, Z+1	; 0x01
 1d2:	07 2e       	mov	r0, r23
 1d4:	00 0c       	add	r0, r0
 1d6:	88 0b       	sbc	r24, r24
 1d8:	99 0b       	sbc	r25, r25
 1da:	79 d2       	rcall	.+1266   	; 0x6ce <__floatsisf>
 1dc:	4b 01       	movw	r8, r22
 1de:	5c 01       	movw	r10, r24
 1e0:	f8 01       	movw	r30, r16
 1e2:	ee 0f       	add	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	e0 5d       	subi	r30, 0xD0	; 208
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	20 81       	ld	r18, Z
 1f0:	31 81       	ldd	r19, Z+1	; 0x01
 1f2:	42 81       	ldd	r20, Z+2	; 0x02
 1f4:	53 81       	ldd	r21, Z+3	; 0x03
 1f6:	1b d3       	rcall	.+1590   	; 0x82e <__gesf2>
 1f8:	18 16       	cp	r1, r24
 1fa:	5c f4       	brge	.+22     	; 0x212 <__vector_16+0x106>
					adcmax[n] = adc[n];
 1fc:	f8 01       	movw	r30, r16
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	e0 5d       	subi	r30, 0xD0	; 208
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	80 82       	st	Z, r8
 20c:	91 82       	std	Z+1, r9	; 0x01
 20e:	a2 82       	std	Z+2, r10	; 0x02
 210:	b3 82       	std	Z+3, r11	; 0x03
				if( adc[n] < adcmin[n]) //작을 때 넣는 거
 212:	f8 01       	movw	r30, r16
 214:	ee 0f       	add	r30, r30
 216:	ff 1f       	adc	r31, r31
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	e0 50       	subi	r30, 0x00	; 0
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	20 81       	ld	r18, Z
 222:	31 81       	ldd	r19, Z+1	; 0x01
 224:	42 81       	ldd	r20, Z+2	; 0x02
 226:	53 81       	ldd	r21, Z+3	; 0x03
 228:	c5 01       	movw	r24, r10
 22a:	b4 01       	movw	r22, r8
 22c:	b1 d1       	rcall	.+866    	; 0x590 <__cmpsf2>
 22e:	88 23       	and	r24, r24
 230:	5c f4       	brge	.+22     	; 0x248 <__vector_16+0x13c>
					adcmin[n] = adc[n];
 232:	f8 01       	movw	r30, r16
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	ee 0f       	add	r30, r30
 23a:	ff 1f       	adc	r31, r31
 23c:	e0 50       	subi	r30, 0x00	; 0
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	80 82       	st	Z, r8
 242:	91 82       	std	Z+1, r9	; 0x01
 244:	a2 82       	std	Z+2, r10	; 0x02
 246:	b3 82       	std	Z+3, r11	; 0x03
			adc[i] = ADC;				// 반복문 돌면서 에이디씨 제로부터 배열에 집어 넣는 거임.
		}
										//ADC를 받아라잉
		if(ModeSet==0)
		{
			for(int n = 0; n < 8; n ++) //큰가 작은가
 248:	0f 5f       	subi	r16, 0xFF	; 255
 24a:	1f 4f       	sbci	r17, 0xFF	; 255
 24c:	02 c0       	rjmp	.+4      	; 0x252 <__vector_16+0x146>
 24e:	00 e0       	ldi	r16, 0x00	; 0
 250:	10 e0       	ldi	r17, 0x00	; 0
 252:	08 30       	cpi	r16, 0x08	; 8
 254:	11 05       	cpc	r17, r1
 256:	0c f4       	brge	.+2      	; 0x25a <__vector_16+0x14e>
 258:	b5 cf       	rjmp	.-150    	; 0x1c4 <__vector_16+0xb8>
					adcmin[n] = adc[n];
			}
		}
		//라면 최대최소를 받으라
		
		if(ModeSet==1){
 25a:	ea 94       	dec	r14
 25c:	ef 28       	or	r14, r15
 25e:	09 f0       	breq	.+2      	; 0x262 <__vector_16+0x156>
 260:	d4 c0       	rjmp	.+424    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 262:	3c c0       	rjmp	.+120    	; 0x2dc <__vector_16+0x1d0>
			
			for(int t =0 ; t < 8; t++)
			{
				/*NOrmalize Data = (data - min)/ (max-min)* resolution*/

				normalize[t] = ((double)(adc[t]-adcmin[t]))/(adcmax[t]-adcmin[t])*100;
 264:	f7 01       	movw	r30, r14
 266:	ee 0f       	add	r30, r30
 268:	ff 1f       	adc	r31, r31
 26a:	ee 5a       	subi	r30, 0xAE	; 174
 26c:	fe 4f       	sbci	r31, 0xFE	; 254
 26e:	60 81       	ld	r22, Z
 270:	71 81       	ldd	r23, Z+1	; 0x01
 272:	87 01       	movw	r16, r14
 274:	00 0f       	add	r16, r16
 276:	11 1f       	adc	r17, r17
 278:	00 0f       	add	r16, r16
 27a:	11 1f       	adc	r17, r17
 27c:	f8 01       	movw	r30, r16
 27e:	e0 50       	subi	r30, 0x00	; 0
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	80 80       	ld	r8, Z
 284:	91 80       	ldd	r9, Z+1	; 0x01
 286:	a2 80       	ldd	r10, Z+2	; 0x02
 288:	b3 80       	ldd	r11, Z+3	; 0x03
 28a:	07 2e       	mov	r0, r23
 28c:	00 0c       	add	r0, r0
 28e:	88 0b       	sbc	r24, r24
 290:	99 0b       	sbc	r25, r25
 292:	1d d2       	rcall	.+1082   	; 0x6ce <__floatsisf>
 294:	a5 01       	movw	r20, r10
 296:	94 01       	movw	r18, r8
 298:	16 d1       	rcall	.+556    	; 0x4c6 <__subsf3>
 29a:	2b 01       	movw	r4, r22
 29c:	3c 01       	movw	r6, r24
 29e:	f8 01       	movw	r30, r16
 2a0:	e0 5d       	subi	r30, 0xD0	; 208
 2a2:	fe 4f       	sbci	r31, 0xFE	; 254
 2a4:	60 81       	ld	r22, Z
 2a6:	71 81       	ldd	r23, Z+1	; 0x01
 2a8:	82 81       	ldd	r24, Z+2	; 0x02
 2aa:	93 81       	ldd	r25, Z+3	; 0x03
 2ac:	a5 01       	movw	r20, r10
 2ae:	94 01       	movw	r18, r8
 2b0:	0a d1       	rcall	.+532    	; 0x4c6 <__subsf3>
 2b2:	9b 01       	movw	r18, r22
 2b4:	ac 01       	movw	r20, r24
 2b6:	c3 01       	movw	r24, r6
 2b8:	b2 01       	movw	r22, r4
 2ba:	6e d1       	rcall	.+732    	; 0x598 <__divsf3>
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	48 ec       	ldi	r20, 0xC8	; 200
 2c2:	52 e4       	ldi	r21, 0x42	; 66
 2c4:	b8 d2       	rcall	.+1392   	; 0x836 <__mulsf3>
 2c6:	f8 01       	movw	r30, r16
 2c8:	ec 59       	subi	r30, 0x9C	; 156
 2ca:	fe 4f       	sbci	r31, 0xFE	; 254
 2cc:	60 83       	st	Z, r22
 2ce:	71 83       	std	Z+1, r23	; 0x01
 2d0:	82 83       	std	Z+2, r24	; 0x02
 2d2:	93 83       	std	Z+3, r25	; 0x03
		//라면 최대최소를 받으라
		
		if(ModeSet==1){
			
			
			for(int t =0 ; t < 8; t++)
 2d4:	9f ef       	ldi	r25, 0xFF	; 255
 2d6:	e9 1a       	sub	r14, r25
 2d8:	f9 0a       	sbc	r15, r25
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <__vector_16+0x1d4>
 2dc:	e1 2c       	mov	r14, r1
 2de:	f1 2c       	mov	r15, r1
 2e0:	88 e0       	ldi	r24, 0x08	; 8
 2e2:	e8 16       	cp	r14, r24
 2e4:	f1 04       	cpc	r15, r1
 2e6:	0c f4       	brge	.+2      	; 0x2ea <__vector_16+0x1de>
 2e8:	bd cf       	rjmp	.-134    	; 0x264 <__vector_16+0x158>
 2ea:	00 e0       	ldi	r16, 0x00	; 0
 2ec:	10 e0       	ldi	r17, 0x00	; 0
 2ee:	2f c0       	rjmp	.+94     	; 0x34e <__vector_16+0x242>
				normalize[t] = ((double)(adc[t]-adcmin[t]))/(adcmax[t]-adcmin[t])*100;
			}
			
			for(int b =0 ; b < 8; b++)
			{
				if (normalize[b] < 50)
 2f0:	f8 01       	movw	r30, r16
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	ec 59       	subi	r30, 0x9C	; 156
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	60 81       	ld	r22, Z
 300:	71 81       	ldd	r23, Z+1	; 0x01
 302:	82 81       	ldd	r24, Z+2	; 0x02
 304:	93 81       	ldd	r25, Z+3	; 0x03
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	48 e4       	ldi	r20, 0x48	; 72
 30c:	52 e4       	ldi	r21, 0x42	; 66
 30e:	40 d1       	rcall	.+640    	; 0x590 <__cmpsf2>
 310:	88 23       	and	r24, r24
 312:	84 f4       	brge	.+32     	; 0x334 <__vector_16+0x228>
				{	
					IR[b] = 1; // black
 314:	f8 01       	movw	r30, r16
 316:	ee 0f       	add	r30, r30
 318:	ff 1f       	adc	r31, r31
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	ec 57       	subi	r30, 0x7C	; 124
 320:	fe 4f       	sbci	r31, 0xFE	; 254
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	a0 e8       	ldi	r26, 0x80	; 128
 328:	bf e3       	ldi	r27, 0x3F	; 63
 32a:	80 83       	st	Z, r24
 32c:	91 83       	std	Z+1, r25	; 0x01
 32e:	a2 83       	std	Z+2, r26	; 0x02
 330:	b3 83       	std	Z+3, r27	; 0x03
 332:	0b c0       	rjmp	.+22     	; 0x34a <__vector_16+0x23e>
				}
				else {
					IR[b] = 0; // white
 334:	f8 01       	movw	r30, r16
 336:	ee 0f       	add	r30, r30
 338:	ff 1f       	adc	r31, r31
 33a:	ee 0f       	add	r30, r30
 33c:	ff 1f       	adc	r31, r31
 33e:	ec 57       	subi	r30, 0x7C	; 124
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	10 82       	st	Z, r1
 344:	11 82       	std	Z+1, r1	; 0x01
 346:	12 82       	std	Z+2, r1	; 0x02
 348:	13 82       	std	Z+3, r1	; 0x03
				/*NOrmalize Data = (data - min)/ (max-min)* resolution*/

				normalize[t] = ((double)(adc[t]-adcmin[t]))/(adcmax[t]-adcmin[t])*100;
			}
			
			for(int b =0 ; b < 8; b++)
 34a:	0f 5f       	subi	r16, 0xFF	; 255
 34c:	1f 4f       	sbci	r17, 0xFF	; 255
 34e:	08 30       	cpi	r16, 0x08	; 8
 350:	11 05       	cpc	r17, r1
 352:	74 f2       	brlt	.-100    	; 0x2f0 <__vector_16+0x1e4>
				else {
					IR[b] = 0; // white
				}
			}
			
			int Weight[8] = {-8, -4, -2, -1, 1, 2, 4, 8};
 354:	80 e1       	ldi	r24, 0x10	; 16
 356:	e0 e2       	ldi	r30, 0x20	; 32
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	de 01       	movw	r26, r28
 35c:	11 96       	adiw	r26, 0x01	; 1
 35e:	01 90       	ld	r0, Z+
 360:	0d 92       	st	X+, r0
 362:	8a 95       	dec	r24
 364:	e1 f7       	brne	.-8      	; 0x35e <__vector_16+0x252>
			int total = 0;
			
			for(int k=0; k<8; k++){
 366:	e1 2c       	mov	r14, r1
 368:	f1 2c       	mov	r15, r1
					IR[b] = 0; // white
				}
			}
			
			int Weight[8] = {-8, -4, -2, -1, 1, 2, 4, 8};
			int total = 0;
 36a:	00 e0       	ldi	r16, 0x00	; 0
 36c:	10 e0       	ldi	r17, 0x00	; 0
			
			for(int k=0; k<8; k++){
 36e:	2d c0       	rjmp	.+90     	; 0x3ca <__vector_16+0x2be>
				total += IR[k]*Weight[k];
 370:	f7 01       	movw	r30, r14
 372:	ee 0f       	add	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	ee 0f       	add	r30, r30
 378:	ff 1f       	adc	r31, r31
 37a:	ec 57       	subi	r30, 0x7C	; 124
 37c:	fe 4f       	sbci	r31, 0xFE	; 254
 37e:	80 80       	ld	r8, Z
 380:	91 80       	ldd	r9, Z+1	; 0x01
 382:	a2 80       	ldd	r10, Z+2	; 0x02
 384:	b3 80       	ldd	r11, Z+3	; 0x03
 386:	f7 01       	movw	r30, r14
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	8c 0f       	add	r24, r28
 392:	9d 1f       	adc	r25, r29
 394:	e8 0f       	add	r30, r24
 396:	f9 1f       	adc	r31, r25
 398:	60 81       	ld	r22, Z
 39a:	71 81       	ldd	r23, Z+1	; 0x01
 39c:	07 2e       	mov	r0, r23
 39e:	00 0c       	add	r0, r0
 3a0:	88 0b       	sbc	r24, r24
 3a2:	99 0b       	sbc	r25, r25
 3a4:	94 d1       	rcall	.+808    	; 0x6ce <__floatsisf>
 3a6:	a5 01       	movw	r20, r10
 3a8:	94 01       	movw	r18, r8
 3aa:	45 d2       	rcall	.+1162   	; 0x836 <__mulsf3>
 3ac:	4b 01       	movw	r8, r22
 3ae:	5c 01       	movw	r10, r24
 3b0:	b8 01       	movw	r22, r16
 3b2:	11 0f       	add	r17, r17
 3b4:	88 0b       	sbc	r24, r24
 3b6:	99 0b       	sbc	r25, r25
 3b8:	8a d1       	rcall	.+788    	; 0x6ce <__floatsisf>
 3ba:	a5 01       	movw	r20, r10
 3bc:	94 01       	movw	r18, r8
 3be:	84 d0       	rcall	.+264    	; 0x4c8 <__addsf3>
 3c0:	53 d1       	rcall	.+678    	; 0x668 <__fixsfsi>
 3c2:	8b 01       	movw	r16, r22
			}
			
			int Weight[8] = {-8, -4, -2, -1, 1, 2, 4, 8};
			int total = 0;
			
			for(int k=0; k<8; k++){
 3c4:	9f ef       	ldi	r25, 0xFF	; 255
 3c6:	e9 1a       	sub	r14, r25
 3c8:	f9 0a       	sbc	r15, r25
 3ca:	88 e0       	ldi	r24, 0x08	; 8
 3cc:	e8 16       	cp	r14, r24
 3ce:	f1 04       	cpc	r15, r1
 3d0:	7c f2       	brlt	.-98     	; 0x370 <__vector_16+0x264>
				total += IR[k]*Weight[k];
			}
			
			if(total == 0){
 3d2:	01 15       	cp	r16, r1
 3d4:	11 05       	cpc	r17, r1
 3d6:	39 f4       	brne	.+14     	; 0x3e6 <__vector_16+0x2da>
				OCR1A = 639; OCR1B = 639;
 3d8:	8f e7       	ldi	r24, 0x7F	; 127
 3da:	92 e0       	ldi	r25, 0x02	; 2
 3dc:	9b bd       	out	0x2b, r25	; 43
 3de:	8a bd       	out	0x2a, r24	; 42
 3e0:	99 bd       	out	0x29, r25	; 41
 3e2:	88 bd       	out	0x28, r24	; 40
 3e4:	12 c0       	rjmp	.+36     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			}
			else if (total<0){//왼쪽으로 돌아라잉
 3e6:	11 23       	and	r17, r17
 3e8:	3c f4       	brge	.+14     	; 0x3f8 <__vector_16+0x2ec>
				OCR1A = 639; OCR1B = 0;
 3ea:	8f e7       	ldi	r24, 0x7F	; 127
 3ec:	92 e0       	ldi	r25, 0x02	; 2
 3ee:	9b bd       	out	0x2b, r25	; 43
 3f0:	8a bd       	out	0x2a, r24	; 42
 3f2:	19 bc       	out	0x29, r1	; 41
 3f4:	18 bc       	out	0x28, r1	; 40
 3f6:	09 c0       	rjmp	.+18     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			}
			else if(total>0){//오른쪽으로 돌아라잉
 3f8:	10 16       	cp	r1, r16
 3fa:	11 06       	cpc	r1, r17
 3fc:	34 f4       	brge	.+12     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
				OCR1A = 0; OCR1B = 639;
 3fe:	1b bc       	out	0x2b, r1	; 43
 400:	1a bc       	out	0x2a, r1	; 42
 402:	8f e7       	ldi	r24, 0x7F	; 127
 404:	92 e0       	ldi	r25, 0x02	; 2
 406:	99 bd       	out	0x29, r25	; 41
 408:	88 bd       	out	0x28, r24	; 40
			if(TotalWeight < 2048 && TotalWeight > -2048){//1024*-2
				 OCR1A = 499; OCR1A = 499; // 왼쪽으로 돌기?
			}*/	
		}
	}
}
 40a:	60 96       	adiw	r28, 0x10	; 16
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	de bf       	out	0x3e, r29	; 62
 412:	0f be       	out	0x3f, r0	; 63
 414:	cd bf       	out	0x3d, r28	; 61
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	ff 90       	pop	r15
 438:	ef 90       	pop	r14
 43a:	bf 90       	pop	r11
 43c:	af 90       	pop	r10
 43e:	9f 90       	pop	r9
 440:	8f 90       	pop	r8
 442:	7f 90       	pop	r7
 444:	6f 90       	pop	r6
 446:	5f 90       	pop	r5
 448:	4f 90       	pop	r4
 44a:	0f 90       	pop	r0
 44c:	0b be       	out	0x3b, r0	; 59
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <Uart_Init>:

}

void Uart_Init()
{
	UCSR1A=0x00;
 458:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B=(1<<RXEN)|(1<<TXEN);
 45c:	88 e1       	ldi	r24, 0x18	; 24
 45e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C=(1<<UCSZ11)|(1<<UCSZ10);
 462:	86 e0       	ldi	r24, 0x06	; 6
 464:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1H=0;
 468:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L=103;
 46c:	87 e6       	ldi	r24, 0x67	; 103
 46e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 472:	08 95       	ret

00000474 <main>:

int main(void)
{
	
	
	DDRA=0xFF;//출력 설정
 474:	df ef       	ldi	r29, 0xFF	; 255
 476:	da bb       	out	0x1a, r29	; 26
	DDRF=0x00;//IR적외선 입력 설정
 478:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	ADCSRA=0b10000111;//ADC활성화  128분주비 
 47c:	c7 e8       	ldi	r28, 0x87	; 135
 47e:	c6 b9       	out	0x06, r28	; 6
	//int led=0xFF;//1111 1111 다 꺼짐
	
	///타이머 레지스터 설정
	
	TCCR0 = (0<<WGM01)|(0<<WGM00)|(0<<COM01)|(0<<COM00)|(1<<CS02)|(1<<CS01)|(0<<CS00);// 노말 모드 논인벌팅 모드 256 분주비
 480:	86 e0       	ldi	r24, 0x06	; 6
 482:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0);		//0번 오벌플로우 인터럽트
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 131;//분주비 계산하기 거시기해서 예제코드랑 같은거 씀
 488:	83 e8       	ldi	r24, 0x83	; 131
 48a:	82 bf       	out	0x32, r24	; 50
	
	
	 Uart_Init();
 48c:	e5 df       	rcall	.-54     	; 0x458 <Uart_Init>
	
	////모터 설정~~~~
	
	DDRB = 0xFF;	//출력 설정 1111 1111 모터
 48e:	d7 bb       	out	0x17, r29	; 23
	DDRD = 0b00001000;	//입력설정 스위치
 490:	88 e0       	ldi	r24, 0x08	; 8
 492:	81 bb       	out	0x11, r24	; 17
	DDRE = 0x0F;	//모터방향출력 설정
 494:	8f e0       	ldi	r24, 0x0F	; 15
 496:	82 b9       	out	0x02, r24	; 2
	
	PORTE=0x0a;		//모터 방향 설정  0b 1010 1010
 498:	8a e0       	ldi	r24, 0x0A	; 10
 49a:	83 b9       	out	0x03, r24	; 3
	
	ADMUX = (1<< REFS1);// 기준 전압 5볼트
 49c:	90 e8       	ldi	r25, 0x80	; 128
 49e:	97 b9       	out	0x07, r25	; 7
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<< ADPS0);
 4a0:	c6 b9       	out	0x06, r28	; 6
	
	
	TCCR1A = (1<<COM1A1)|(0<<COM1A0)|(1<<COM1B1)|(0<<COM1B0)|(1<<WGM11);//타이머 AB케널 PWM설정 빠른, 피엠아 모드설정
 4a2:	92 ea       	ldi	r25, 0xA2	; 162
 4a4:	9f bd       	out	0x2f, r25	; 47
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(0<<CS02)|(0<<CS01)|(1<<CS00);//14모드 설정 페스트피더블유엠 탑이 아이시알 오시알은 바텀
 4a6:	99 e1       	ldi	r25, 0x19	; 25
 4a8:	9e bd       	out	0x2e, r25	; 46
	//뒤에 3개는 분주비의미 인데 1분주비
	
	EIMSK = (1<<INT0)|(1<<INT1);
 4aa:	93 e0       	ldi	r25, 0x03	; 3
 4ac:	99 bf       	out	0x39, r25	; 57
	
	EICRA = (1<<ISC01)|(0<<ISC00)|(1<<ISC11)|(0<<ISC10);
 4ae:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	
	ICR1 = 799;//탑값
 4b2:	8f e1       	ldi	r24, 0x1F	; 31
 4b4:	93 e0       	ldi	r25, 0x03	; 3
 4b6:	97 bd       	out	0x27, r25	; 39
 4b8:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0;//에이채널 피더블유엠
 4ba:	1b bc       	out	0x2b, r1	; 43
 4bc:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;//비 채널    모터출력 80퍼라는 뜻 799*0.8값639
 4be:	19 bc       	out	0x29, r1	; 41
 4c0:	18 bc       	out	0x28, r1	; 40
	
	
	sei();
 4c2:	78 94       	sei
 4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <main+0x50>

000004c6 <__subsf3>:
 4c6:	50 58       	subi	r21, 0x80	; 128

000004c8 <__addsf3>:
 4c8:	bb 27       	eor	r27, r27
 4ca:	aa 27       	eor	r26, r26
 4cc:	0e d0       	rcall	.+28     	; 0x4ea <__addsf3x>
 4ce:	75 c1       	rjmp	.+746    	; 0x7ba <__fp_round>
 4d0:	66 d1       	rcall	.+716    	; 0x79e <__fp_pscA>
 4d2:	30 f0       	brcs	.+12     	; 0x4e0 <__addsf3+0x18>
 4d4:	6b d1       	rcall	.+726    	; 0x7ac <__fp_pscB>
 4d6:	20 f0       	brcs	.+8      	; 0x4e0 <__addsf3+0x18>
 4d8:	31 f4       	brne	.+12     	; 0x4e6 <__addsf3+0x1e>
 4da:	9f 3f       	cpi	r25, 0xFF	; 255
 4dc:	11 f4       	brne	.+4      	; 0x4e2 <__addsf3+0x1a>
 4de:	1e f4       	brtc	.+6      	; 0x4e6 <__addsf3+0x1e>
 4e0:	5b c1       	rjmp	.+694    	; 0x798 <__fp_nan>
 4e2:	0e f4       	brtc	.+2      	; 0x4e6 <__addsf3+0x1e>
 4e4:	e0 95       	com	r30
 4e6:	e7 fb       	bst	r30, 7
 4e8:	51 c1       	rjmp	.+674    	; 0x78c <__fp_inf>

000004ea <__addsf3x>:
 4ea:	e9 2f       	mov	r30, r25
 4ec:	77 d1       	rcall	.+750    	; 0x7dc <__fp_split3>
 4ee:	80 f3       	brcs	.-32     	; 0x4d0 <__addsf3+0x8>
 4f0:	ba 17       	cp	r27, r26
 4f2:	62 07       	cpc	r22, r18
 4f4:	73 07       	cpc	r23, r19
 4f6:	84 07       	cpc	r24, r20
 4f8:	95 07       	cpc	r25, r21
 4fa:	18 f0       	brcs	.+6      	; 0x502 <__addsf3x+0x18>
 4fc:	71 f4       	brne	.+28     	; 0x51a <__addsf3x+0x30>
 4fe:	9e f5       	brtc	.+102    	; 0x566 <__addsf3x+0x7c>
 500:	8f c1       	rjmp	.+798    	; 0x820 <__fp_zero>
 502:	0e f4       	brtc	.+2      	; 0x506 <__addsf3x+0x1c>
 504:	e0 95       	com	r30
 506:	0b 2e       	mov	r0, r27
 508:	ba 2f       	mov	r27, r26
 50a:	a0 2d       	mov	r26, r0
 50c:	0b 01       	movw	r0, r22
 50e:	b9 01       	movw	r22, r18
 510:	90 01       	movw	r18, r0
 512:	0c 01       	movw	r0, r24
 514:	ca 01       	movw	r24, r20
 516:	a0 01       	movw	r20, r0
 518:	11 24       	eor	r1, r1
 51a:	ff 27       	eor	r31, r31
 51c:	59 1b       	sub	r21, r25
 51e:	99 f0       	breq	.+38     	; 0x546 <__addsf3x+0x5c>
 520:	59 3f       	cpi	r21, 0xF9	; 249
 522:	50 f4       	brcc	.+20     	; 0x538 <__addsf3x+0x4e>
 524:	50 3e       	cpi	r21, 0xE0	; 224
 526:	68 f1       	brcs	.+90     	; 0x582 <__addsf3x+0x98>
 528:	1a 16       	cp	r1, r26
 52a:	f0 40       	sbci	r31, 0x00	; 0
 52c:	a2 2f       	mov	r26, r18
 52e:	23 2f       	mov	r18, r19
 530:	34 2f       	mov	r19, r20
 532:	44 27       	eor	r20, r20
 534:	58 5f       	subi	r21, 0xF8	; 248
 536:	f3 cf       	rjmp	.-26     	; 0x51e <__addsf3x+0x34>
 538:	46 95       	lsr	r20
 53a:	37 95       	ror	r19
 53c:	27 95       	ror	r18
 53e:	a7 95       	ror	r26
 540:	f0 40       	sbci	r31, 0x00	; 0
 542:	53 95       	inc	r21
 544:	c9 f7       	brne	.-14     	; 0x538 <__addsf3x+0x4e>
 546:	7e f4       	brtc	.+30     	; 0x566 <__addsf3x+0x7c>
 548:	1f 16       	cp	r1, r31
 54a:	ba 0b       	sbc	r27, r26
 54c:	62 0b       	sbc	r22, r18
 54e:	73 0b       	sbc	r23, r19
 550:	84 0b       	sbc	r24, r20
 552:	ba f0       	brmi	.+46     	; 0x582 <__addsf3x+0x98>
 554:	91 50       	subi	r25, 0x01	; 1
 556:	a1 f0       	breq	.+40     	; 0x580 <__addsf3x+0x96>
 558:	ff 0f       	add	r31, r31
 55a:	bb 1f       	adc	r27, r27
 55c:	66 1f       	adc	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	88 1f       	adc	r24, r24
 562:	c2 f7       	brpl	.-16     	; 0x554 <__addsf3x+0x6a>
 564:	0e c0       	rjmp	.+28     	; 0x582 <__addsf3x+0x98>
 566:	ba 0f       	add	r27, r26
 568:	62 1f       	adc	r22, r18
 56a:	73 1f       	adc	r23, r19
 56c:	84 1f       	adc	r24, r20
 56e:	48 f4       	brcc	.+18     	; 0x582 <__addsf3x+0x98>
 570:	87 95       	ror	r24
 572:	77 95       	ror	r23
 574:	67 95       	ror	r22
 576:	b7 95       	ror	r27
 578:	f7 95       	ror	r31
 57a:	9e 3f       	cpi	r25, 0xFE	; 254
 57c:	08 f0       	brcs	.+2      	; 0x580 <__addsf3x+0x96>
 57e:	b3 cf       	rjmp	.-154    	; 0x4e6 <__addsf3+0x1e>
 580:	93 95       	inc	r25
 582:	88 0f       	add	r24, r24
 584:	08 f0       	brcs	.+2      	; 0x588 <__addsf3x+0x9e>
 586:	99 27       	eor	r25, r25
 588:	ee 0f       	add	r30, r30
 58a:	97 95       	ror	r25
 58c:	87 95       	ror	r24
 58e:	08 95       	ret

00000590 <__cmpsf2>:
 590:	d9 d0       	rcall	.+434    	; 0x744 <__fp_cmp>
 592:	08 f4       	brcc	.+2      	; 0x596 <__cmpsf2+0x6>
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	08 95       	ret

00000598 <__divsf3>:
 598:	0c d0       	rcall	.+24     	; 0x5b2 <__divsf3x>
 59a:	0f c1       	rjmp	.+542    	; 0x7ba <__fp_round>
 59c:	07 d1       	rcall	.+526    	; 0x7ac <__fp_pscB>
 59e:	40 f0       	brcs	.+16     	; 0x5b0 <__divsf3+0x18>
 5a0:	fe d0       	rcall	.+508    	; 0x79e <__fp_pscA>
 5a2:	30 f0       	brcs	.+12     	; 0x5b0 <__divsf3+0x18>
 5a4:	21 f4       	brne	.+8      	; 0x5ae <__divsf3+0x16>
 5a6:	5f 3f       	cpi	r21, 0xFF	; 255
 5a8:	19 f0       	breq	.+6      	; 0x5b0 <__divsf3+0x18>
 5aa:	f0 c0       	rjmp	.+480    	; 0x78c <__fp_inf>
 5ac:	51 11       	cpse	r21, r1
 5ae:	39 c1       	rjmp	.+626    	; 0x822 <__fp_szero>
 5b0:	f3 c0       	rjmp	.+486    	; 0x798 <__fp_nan>

000005b2 <__divsf3x>:
 5b2:	14 d1       	rcall	.+552    	; 0x7dc <__fp_split3>
 5b4:	98 f3       	brcs	.-26     	; 0x59c <__divsf3+0x4>

000005b6 <__divsf3_pse>:
 5b6:	99 23       	and	r25, r25
 5b8:	c9 f3       	breq	.-14     	; 0x5ac <__divsf3+0x14>
 5ba:	55 23       	and	r21, r21
 5bc:	b1 f3       	breq	.-20     	; 0x5aa <__divsf3+0x12>
 5be:	95 1b       	sub	r25, r21
 5c0:	55 0b       	sbc	r21, r21
 5c2:	bb 27       	eor	r27, r27
 5c4:	aa 27       	eor	r26, r26
 5c6:	62 17       	cp	r22, r18
 5c8:	73 07       	cpc	r23, r19
 5ca:	84 07       	cpc	r24, r20
 5cc:	38 f0       	brcs	.+14     	; 0x5dc <__divsf3_pse+0x26>
 5ce:	9f 5f       	subi	r25, 0xFF	; 255
 5d0:	5f 4f       	sbci	r21, 0xFF	; 255
 5d2:	22 0f       	add	r18, r18
 5d4:	33 1f       	adc	r19, r19
 5d6:	44 1f       	adc	r20, r20
 5d8:	aa 1f       	adc	r26, r26
 5da:	a9 f3       	breq	.-22     	; 0x5c6 <__divsf3_pse+0x10>
 5dc:	33 d0       	rcall	.+102    	; 0x644 <__divsf3_pse+0x8e>
 5de:	0e 2e       	mov	r0, r30
 5e0:	3a f0       	brmi	.+14     	; 0x5f0 <__divsf3_pse+0x3a>
 5e2:	e0 e8       	ldi	r30, 0x80	; 128
 5e4:	30 d0       	rcall	.+96     	; 0x646 <__divsf3_pse+0x90>
 5e6:	91 50       	subi	r25, 0x01	; 1
 5e8:	50 40       	sbci	r21, 0x00	; 0
 5ea:	e6 95       	lsr	r30
 5ec:	00 1c       	adc	r0, r0
 5ee:	ca f7       	brpl	.-14     	; 0x5e2 <__divsf3_pse+0x2c>
 5f0:	29 d0       	rcall	.+82     	; 0x644 <__divsf3_pse+0x8e>
 5f2:	fe 2f       	mov	r31, r30
 5f4:	27 d0       	rcall	.+78     	; 0x644 <__divsf3_pse+0x8e>
 5f6:	66 0f       	add	r22, r22
 5f8:	77 1f       	adc	r23, r23
 5fa:	88 1f       	adc	r24, r24
 5fc:	bb 1f       	adc	r27, r27
 5fe:	26 17       	cp	r18, r22
 600:	37 07       	cpc	r19, r23
 602:	48 07       	cpc	r20, r24
 604:	ab 07       	cpc	r26, r27
 606:	b0 e8       	ldi	r27, 0x80	; 128
 608:	09 f0       	breq	.+2      	; 0x60c <__divsf3_pse+0x56>
 60a:	bb 0b       	sbc	r27, r27
 60c:	80 2d       	mov	r24, r0
 60e:	bf 01       	movw	r22, r30
 610:	ff 27       	eor	r31, r31
 612:	93 58       	subi	r25, 0x83	; 131
 614:	5f 4f       	sbci	r21, 0xFF	; 255
 616:	2a f0       	brmi	.+10     	; 0x622 <__divsf3_pse+0x6c>
 618:	9e 3f       	cpi	r25, 0xFE	; 254
 61a:	51 05       	cpc	r21, r1
 61c:	68 f0       	brcs	.+26     	; 0x638 <__divsf3_pse+0x82>
 61e:	b6 c0       	rjmp	.+364    	; 0x78c <__fp_inf>
 620:	00 c1       	rjmp	.+512    	; 0x822 <__fp_szero>
 622:	5f 3f       	cpi	r21, 0xFF	; 255
 624:	ec f3       	brlt	.-6      	; 0x620 <__divsf3_pse+0x6a>
 626:	98 3e       	cpi	r25, 0xE8	; 232
 628:	dc f3       	brlt	.-10     	; 0x620 <__divsf3_pse+0x6a>
 62a:	86 95       	lsr	r24
 62c:	77 95       	ror	r23
 62e:	67 95       	ror	r22
 630:	b7 95       	ror	r27
 632:	f7 95       	ror	r31
 634:	9f 5f       	subi	r25, 0xFF	; 255
 636:	c9 f7       	brne	.-14     	; 0x62a <__divsf3_pse+0x74>
 638:	88 0f       	add	r24, r24
 63a:	91 1d       	adc	r25, r1
 63c:	96 95       	lsr	r25
 63e:	87 95       	ror	r24
 640:	97 f9       	bld	r25, 7
 642:	08 95       	ret
 644:	e1 e0       	ldi	r30, 0x01	; 1
 646:	66 0f       	add	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	88 1f       	adc	r24, r24
 64c:	bb 1f       	adc	r27, r27
 64e:	62 17       	cp	r22, r18
 650:	73 07       	cpc	r23, r19
 652:	84 07       	cpc	r24, r20
 654:	ba 07       	cpc	r27, r26
 656:	20 f0       	brcs	.+8      	; 0x660 <__divsf3_pse+0xaa>
 658:	62 1b       	sub	r22, r18
 65a:	73 0b       	sbc	r23, r19
 65c:	84 0b       	sbc	r24, r20
 65e:	ba 0b       	sbc	r27, r26
 660:	ee 1f       	adc	r30, r30
 662:	88 f7       	brcc	.-30     	; 0x646 <__divsf3_pse+0x90>
 664:	e0 95       	com	r30
 666:	08 95       	ret

00000668 <__fixsfsi>:
 668:	04 d0       	rcall	.+8      	; 0x672 <__fixunssfsi>
 66a:	68 94       	set
 66c:	b1 11       	cpse	r27, r1
 66e:	d9 c0       	rjmp	.+434    	; 0x822 <__fp_szero>
 670:	08 95       	ret

00000672 <__fixunssfsi>:
 672:	bc d0       	rcall	.+376    	; 0x7ec <__fp_splitA>
 674:	88 f0       	brcs	.+34     	; 0x698 <__fixunssfsi+0x26>
 676:	9f 57       	subi	r25, 0x7F	; 127
 678:	90 f0       	brcs	.+36     	; 0x69e <__fixunssfsi+0x2c>
 67a:	b9 2f       	mov	r27, r25
 67c:	99 27       	eor	r25, r25
 67e:	b7 51       	subi	r27, 0x17	; 23
 680:	a0 f0       	brcs	.+40     	; 0x6aa <__fixunssfsi+0x38>
 682:	d1 f0       	breq	.+52     	; 0x6b8 <__fixunssfsi+0x46>
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	1a f0       	brmi	.+6      	; 0x694 <__fixunssfsi+0x22>
 68e:	ba 95       	dec	r27
 690:	c9 f7       	brne	.-14     	; 0x684 <__fixunssfsi+0x12>
 692:	12 c0       	rjmp	.+36     	; 0x6b8 <__fixunssfsi+0x46>
 694:	b1 30       	cpi	r27, 0x01	; 1
 696:	81 f0       	breq	.+32     	; 0x6b8 <__fixunssfsi+0x46>
 698:	c3 d0       	rcall	.+390    	; 0x820 <__fp_zero>
 69a:	b1 e0       	ldi	r27, 0x01	; 1
 69c:	08 95       	ret
 69e:	c0 c0       	rjmp	.+384    	; 0x820 <__fp_zero>
 6a0:	67 2f       	mov	r22, r23
 6a2:	78 2f       	mov	r23, r24
 6a4:	88 27       	eor	r24, r24
 6a6:	b8 5f       	subi	r27, 0xF8	; 248
 6a8:	39 f0       	breq	.+14     	; 0x6b8 <__fixunssfsi+0x46>
 6aa:	b9 3f       	cpi	r27, 0xF9	; 249
 6ac:	cc f3       	brlt	.-14     	; 0x6a0 <__fixunssfsi+0x2e>
 6ae:	86 95       	lsr	r24
 6b0:	77 95       	ror	r23
 6b2:	67 95       	ror	r22
 6b4:	b3 95       	inc	r27
 6b6:	d9 f7       	brne	.-10     	; 0x6ae <__fixunssfsi+0x3c>
 6b8:	3e f4       	brtc	.+14     	; 0x6c8 <__fixunssfsi+0x56>
 6ba:	90 95       	com	r25
 6bc:	80 95       	com	r24
 6be:	70 95       	com	r23
 6c0:	61 95       	neg	r22
 6c2:	7f 4f       	sbci	r23, 0xFF	; 255
 6c4:	8f 4f       	sbci	r24, 0xFF	; 255
 6c6:	9f 4f       	sbci	r25, 0xFF	; 255
 6c8:	08 95       	ret

000006ca <__floatunsisf>:
 6ca:	e8 94       	clt
 6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <__floatsisf+0x12>

000006ce <__floatsisf>:
 6ce:	97 fb       	bst	r25, 7
 6d0:	3e f4       	brtc	.+14     	; 0x6e0 <__floatsisf+0x12>
 6d2:	90 95       	com	r25
 6d4:	80 95       	com	r24
 6d6:	70 95       	com	r23
 6d8:	61 95       	neg	r22
 6da:	7f 4f       	sbci	r23, 0xFF	; 255
 6dc:	8f 4f       	sbci	r24, 0xFF	; 255
 6de:	9f 4f       	sbci	r25, 0xFF	; 255
 6e0:	99 23       	and	r25, r25
 6e2:	a9 f0       	breq	.+42     	; 0x70e <__floatsisf+0x40>
 6e4:	f9 2f       	mov	r31, r25
 6e6:	96 e9       	ldi	r25, 0x96	; 150
 6e8:	bb 27       	eor	r27, r27
 6ea:	93 95       	inc	r25
 6ec:	f6 95       	lsr	r31
 6ee:	87 95       	ror	r24
 6f0:	77 95       	ror	r23
 6f2:	67 95       	ror	r22
 6f4:	b7 95       	ror	r27
 6f6:	f1 11       	cpse	r31, r1
 6f8:	f8 cf       	rjmp	.-16     	; 0x6ea <__floatsisf+0x1c>
 6fa:	fa f4       	brpl	.+62     	; 0x73a <__floatsisf+0x6c>
 6fc:	bb 0f       	add	r27, r27
 6fe:	11 f4       	brne	.+4      	; 0x704 <__floatsisf+0x36>
 700:	60 ff       	sbrs	r22, 0
 702:	1b c0       	rjmp	.+54     	; 0x73a <__floatsisf+0x6c>
 704:	6f 5f       	subi	r22, 0xFF	; 255
 706:	7f 4f       	sbci	r23, 0xFF	; 255
 708:	8f 4f       	sbci	r24, 0xFF	; 255
 70a:	9f 4f       	sbci	r25, 0xFF	; 255
 70c:	16 c0       	rjmp	.+44     	; 0x73a <__floatsisf+0x6c>
 70e:	88 23       	and	r24, r24
 710:	11 f0       	breq	.+4      	; 0x716 <__floatsisf+0x48>
 712:	96 e9       	ldi	r25, 0x96	; 150
 714:	11 c0       	rjmp	.+34     	; 0x738 <__floatsisf+0x6a>
 716:	77 23       	and	r23, r23
 718:	21 f0       	breq	.+8      	; 0x722 <__floatsisf+0x54>
 71a:	9e e8       	ldi	r25, 0x8E	; 142
 71c:	87 2f       	mov	r24, r23
 71e:	76 2f       	mov	r23, r22
 720:	05 c0       	rjmp	.+10     	; 0x72c <__floatsisf+0x5e>
 722:	66 23       	and	r22, r22
 724:	71 f0       	breq	.+28     	; 0x742 <__floatsisf+0x74>
 726:	96 e8       	ldi	r25, 0x86	; 134
 728:	86 2f       	mov	r24, r22
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	60 e0       	ldi	r22, 0x00	; 0
 72e:	2a f0       	brmi	.+10     	; 0x73a <__floatsisf+0x6c>
 730:	9a 95       	dec	r25
 732:	66 0f       	add	r22, r22
 734:	77 1f       	adc	r23, r23
 736:	88 1f       	adc	r24, r24
 738:	da f7       	brpl	.-10     	; 0x730 <__floatsisf+0x62>
 73a:	88 0f       	add	r24, r24
 73c:	96 95       	lsr	r25
 73e:	87 95       	ror	r24
 740:	97 f9       	bld	r25, 7
 742:	08 95       	ret

00000744 <__fp_cmp>:
 744:	99 0f       	add	r25, r25
 746:	00 08       	sbc	r0, r0
 748:	55 0f       	add	r21, r21
 74a:	aa 0b       	sbc	r26, r26
 74c:	e0 e8       	ldi	r30, 0x80	; 128
 74e:	fe ef       	ldi	r31, 0xFE	; 254
 750:	16 16       	cp	r1, r22
 752:	17 06       	cpc	r1, r23
 754:	e8 07       	cpc	r30, r24
 756:	f9 07       	cpc	r31, r25
 758:	c0 f0       	brcs	.+48     	; 0x78a <__fp_cmp+0x46>
 75a:	12 16       	cp	r1, r18
 75c:	13 06       	cpc	r1, r19
 75e:	e4 07       	cpc	r30, r20
 760:	f5 07       	cpc	r31, r21
 762:	98 f0       	brcs	.+38     	; 0x78a <__fp_cmp+0x46>
 764:	62 1b       	sub	r22, r18
 766:	73 0b       	sbc	r23, r19
 768:	84 0b       	sbc	r24, r20
 76a:	95 0b       	sbc	r25, r21
 76c:	39 f4       	brne	.+14     	; 0x77c <__fp_cmp+0x38>
 76e:	0a 26       	eor	r0, r26
 770:	61 f0       	breq	.+24     	; 0x78a <__fp_cmp+0x46>
 772:	23 2b       	or	r18, r19
 774:	24 2b       	or	r18, r20
 776:	25 2b       	or	r18, r21
 778:	21 f4       	brne	.+8      	; 0x782 <__fp_cmp+0x3e>
 77a:	08 95       	ret
 77c:	0a 26       	eor	r0, r26
 77e:	09 f4       	brne	.+2      	; 0x782 <__fp_cmp+0x3e>
 780:	a1 40       	sbci	r26, 0x01	; 1
 782:	a6 95       	lsr	r26
 784:	8f ef       	ldi	r24, 0xFF	; 255
 786:	81 1d       	adc	r24, r1
 788:	81 1d       	adc	r24, r1
 78a:	08 95       	ret

0000078c <__fp_inf>:
 78c:	97 f9       	bld	r25, 7
 78e:	9f 67       	ori	r25, 0x7F	; 127
 790:	80 e8       	ldi	r24, 0x80	; 128
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	08 95       	ret

00000798 <__fp_nan>:
 798:	9f ef       	ldi	r25, 0xFF	; 255
 79a:	80 ec       	ldi	r24, 0xC0	; 192
 79c:	08 95       	ret

0000079e <__fp_pscA>:
 79e:	00 24       	eor	r0, r0
 7a0:	0a 94       	dec	r0
 7a2:	16 16       	cp	r1, r22
 7a4:	17 06       	cpc	r1, r23
 7a6:	18 06       	cpc	r1, r24
 7a8:	09 06       	cpc	r0, r25
 7aa:	08 95       	ret

000007ac <__fp_pscB>:
 7ac:	00 24       	eor	r0, r0
 7ae:	0a 94       	dec	r0
 7b0:	12 16       	cp	r1, r18
 7b2:	13 06       	cpc	r1, r19
 7b4:	14 06       	cpc	r1, r20
 7b6:	05 06       	cpc	r0, r21
 7b8:	08 95       	ret

000007ba <__fp_round>:
 7ba:	09 2e       	mov	r0, r25
 7bc:	03 94       	inc	r0
 7be:	00 0c       	add	r0, r0
 7c0:	11 f4       	brne	.+4      	; 0x7c6 <__fp_round+0xc>
 7c2:	88 23       	and	r24, r24
 7c4:	52 f0       	brmi	.+20     	; 0x7da <__fp_round+0x20>
 7c6:	bb 0f       	add	r27, r27
 7c8:	40 f4       	brcc	.+16     	; 0x7da <__fp_round+0x20>
 7ca:	bf 2b       	or	r27, r31
 7cc:	11 f4       	brne	.+4      	; 0x7d2 <__fp_round+0x18>
 7ce:	60 ff       	sbrs	r22, 0
 7d0:	04 c0       	rjmp	.+8      	; 0x7da <__fp_round+0x20>
 7d2:	6f 5f       	subi	r22, 0xFF	; 255
 7d4:	7f 4f       	sbci	r23, 0xFF	; 255
 7d6:	8f 4f       	sbci	r24, 0xFF	; 255
 7d8:	9f 4f       	sbci	r25, 0xFF	; 255
 7da:	08 95       	ret

000007dc <__fp_split3>:
 7dc:	57 fd       	sbrc	r21, 7
 7de:	90 58       	subi	r25, 0x80	; 128
 7e0:	44 0f       	add	r20, r20
 7e2:	55 1f       	adc	r21, r21
 7e4:	59 f0       	breq	.+22     	; 0x7fc <__fp_splitA+0x10>
 7e6:	5f 3f       	cpi	r21, 0xFF	; 255
 7e8:	71 f0       	breq	.+28     	; 0x806 <__fp_splitA+0x1a>
 7ea:	47 95       	ror	r20

000007ec <__fp_splitA>:
 7ec:	88 0f       	add	r24, r24
 7ee:	97 fb       	bst	r25, 7
 7f0:	99 1f       	adc	r25, r25
 7f2:	61 f0       	breq	.+24     	; 0x80c <__fp_splitA+0x20>
 7f4:	9f 3f       	cpi	r25, 0xFF	; 255
 7f6:	79 f0       	breq	.+30     	; 0x816 <__fp_splitA+0x2a>
 7f8:	87 95       	ror	r24
 7fa:	08 95       	ret
 7fc:	12 16       	cp	r1, r18
 7fe:	13 06       	cpc	r1, r19
 800:	14 06       	cpc	r1, r20
 802:	55 1f       	adc	r21, r21
 804:	f2 cf       	rjmp	.-28     	; 0x7ea <__fp_split3+0xe>
 806:	46 95       	lsr	r20
 808:	f1 df       	rcall	.-30     	; 0x7ec <__fp_splitA>
 80a:	08 c0       	rjmp	.+16     	; 0x81c <__fp_splitA+0x30>
 80c:	16 16       	cp	r1, r22
 80e:	17 06       	cpc	r1, r23
 810:	18 06       	cpc	r1, r24
 812:	99 1f       	adc	r25, r25
 814:	f1 cf       	rjmp	.-30     	; 0x7f8 <__fp_splitA+0xc>
 816:	86 95       	lsr	r24
 818:	71 05       	cpc	r23, r1
 81a:	61 05       	cpc	r22, r1
 81c:	08 94       	sec
 81e:	08 95       	ret

00000820 <__fp_zero>:
 820:	e8 94       	clt

00000822 <__fp_szero>:
 822:	bb 27       	eor	r27, r27
 824:	66 27       	eor	r22, r22
 826:	77 27       	eor	r23, r23
 828:	cb 01       	movw	r24, r22
 82a:	97 f9       	bld	r25, 7
 82c:	08 95       	ret

0000082e <__gesf2>:
 82e:	8a df       	rcall	.-236    	; 0x744 <__fp_cmp>
 830:	08 f4       	brcc	.+2      	; 0x834 <__gesf2+0x6>
 832:	8f ef       	ldi	r24, 0xFF	; 255
 834:	08 95       	ret

00000836 <__mulsf3>:
 836:	0b d0       	rcall	.+22     	; 0x84e <__mulsf3x>
 838:	c0 cf       	rjmp	.-128    	; 0x7ba <__fp_round>
 83a:	b1 df       	rcall	.-158    	; 0x79e <__fp_pscA>
 83c:	28 f0       	brcs	.+10     	; 0x848 <__mulsf3+0x12>
 83e:	b6 df       	rcall	.-148    	; 0x7ac <__fp_pscB>
 840:	18 f0       	brcs	.+6      	; 0x848 <__mulsf3+0x12>
 842:	95 23       	and	r25, r21
 844:	09 f0       	breq	.+2      	; 0x848 <__mulsf3+0x12>
 846:	a2 cf       	rjmp	.-188    	; 0x78c <__fp_inf>
 848:	a7 cf       	rjmp	.-178    	; 0x798 <__fp_nan>
 84a:	11 24       	eor	r1, r1
 84c:	ea cf       	rjmp	.-44     	; 0x822 <__fp_szero>

0000084e <__mulsf3x>:
 84e:	c6 df       	rcall	.-116    	; 0x7dc <__fp_split3>
 850:	a0 f3       	brcs	.-24     	; 0x83a <__mulsf3+0x4>

00000852 <__mulsf3_pse>:
 852:	95 9f       	mul	r25, r21
 854:	d1 f3       	breq	.-12     	; 0x84a <__mulsf3+0x14>
 856:	95 0f       	add	r25, r21
 858:	50 e0       	ldi	r21, 0x00	; 0
 85a:	55 1f       	adc	r21, r21
 85c:	62 9f       	mul	r22, r18
 85e:	f0 01       	movw	r30, r0
 860:	72 9f       	mul	r23, r18
 862:	bb 27       	eor	r27, r27
 864:	f0 0d       	add	r31, r0
 866:	b1 1d       	adc	r27, r1
 868:	63 9f       	mul	r22, r19
 86a:	aa 27       	eor	r26, r26
 86c:	f0 0d       	add	r31, r0
 86e:	b1 1d       	adc	r27, r1
 870:	aa 1f       	adc	r26, r26
 872:	64 9f       	mul	r22, r20
 874:	66 27       	eor	r22, r22
 876:	b0 0d       	add	r27, r0
 878:	a1 1d       	adc	r26, r1
 87a:	66 1f       	adc	r22, r22
 87c:	82 9f       	mul	r24, r18
 87e:	22 27       	eor	r18, r18
 880:	b0 0d       	add	r27, r0
 882:	a1 1d       	adc	r26, r1
 884:	62 1f       	adc	r22, r18
 886:	73 9f       	mul	r23, r19
 888:	b0 0d       	add	r27, r0
 88a:	a1 1d       	adc	r26, r1
 88c:	62 1f       	adc	r22, r18
 88e:	83 9f       	mul	r24, r19
 890:	a0 0d       	add	r26, r0
 892:	61 1d       	adc	r22, r1
 894:	22 1f       	adc	r18, r18
 896:	74 9f       	mul	r23, r20
 898:	33 27       	eor	r19, r19
 89a:	a0 0d       	add	r26, r0
 89c:	61 1d       	adc	r22, r1
 89e:	23 1f       	adc	r18, r19
 8a0:	84 9f       	mul	r24, r20
 8a2:	60 0d       	add	r22, r0
 8a4:	21 1d       	adc	r18, r1
 8a6:	82 2f       	mov	r24, r18
 8a8:	76 2f       	mov	r23, r22
 8aa:	6a 2f       	mov	r22, r26
 8ac:	11 24       	eor	r1, r1
 8ae:	9f 57       	subi	r25, 0x7F	; 127
 8b0:	50 40       	sbci	r21, 0x00	; 0
 8b2:	8a f0       	brmi	.+34     	; 0x8d6 <__mulsf3_pse+0x84>
 8b4:	e1 f0       	breq	.+56     	; 0x8ee <__mulsf3_pse+0x9c>
 8b6:	88 23       	and	r24, r24
 8b8:	4a f0       	brmi	.+18     	; 0x8cc <__mulsf3_pse+0x7a>
 8ba:	ee 0f       	add	r30, r30
 8bc:	ff 1f       	adc	r31, r31
 8be:	bb 1f       	adc	r27, r27
 8c0:	66 1f       	adc	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	91 50       	subi	r25, 0x01	; 1
 8c8:	50 40       	sbci	r21, 0x00	; 0
 8ca:	a9 f7       	brne	.-22     	; 0x8b6 <__mulsf3_pse+0x64>
 8cc:	9e 3f       	cpi	r25, 0xFE	; 254
 8ce:	51 05       	cpc	r21, r1
 8d0:	70 f0       	brcs	.+28     	; 0x8ee <__mulsf3_pse+0x9c>
 8d2:	5c cf       	rjmp	.-328    	; 0x78c <__fp_inf>
 8d4:	a6 cf       	rjmp	.-180    	; 0x822 <__fp_szero>
 8d6:	5f 3f       	cpi	r21, 0xFF	; 255
 8d8:	ec f3       	brlt	.-6      	; 0x8d4 <__mulsf3_pse+0x82>
 8da:	98 3e       	cpi	r25, 0xE8	; 232
 8dc:	dc f3       	brlt	.-10     	; 0x8d4 <__mulsf3_pse+0x82>
 8de:	86 95       	lsr	r24
 8e0:	77 95       	ror	r23
 8e2:	67 95       	ror	r22
 8e4:	b7 95       	ror	r27
 8e6:	f7 95       	ror	r31
 8e8:	e7 95       	ror	r30
 8ea:	9f 5f       	subi	r25, 0xFF	; 255
 8ec:	c1 f7       	brne	.-16     	; 0x8de <__mulsf3_pse+0x8c>
 8ee:	fe 2b       	or	r31, r30
 8f0:	88 0f       	add	r24, r24
 8f2:	91 1d       	adc	r25, r1
 8f4:	96 95       	lsr	r25
 8f6:	87 95       	ror	r24
 8f8:	97 f9       	bld	r25, 7
 8fa:	08 95       	ret

000008fc <_exit>:
 8fc:	f8 94       	cli

000008fe <__stop_program>:
 8fe:	ff cf       	rjmp	.-2      	; 0x8fe <__stop_program>
